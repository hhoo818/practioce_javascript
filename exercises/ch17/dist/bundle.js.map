{"version":3,"file":"bundle.js","mappings":";;;;;;;;;;;;;;AAAA;AACO;AACP,sBAAsB,eAAe;AACrC,wBAAwB,eAAe;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACZA;AACO;AACP;AACA;AACA;AACA,sBAAsB,eAAe;AACrC,wBAAwB,eAAe;AACvC;AACA;AACA;AACA,yBAAyB,QAAQ;AACjC,2BAA2B,QAAQ;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;UC9BA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;;ACN6C;AACA;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA,IAAI,0DAAU;AACd,GAAG;AACH;AACA;AACA;AACA,WAAW,0DAAU;AACrB,IAAI,0DAAU;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,EAAE,0DAAU,gC","sources":["webpack://ch17-ts/./ex05/renderGrid.js","webpack://ch17-ts/./ex05/updateGrid.js","webpack://ch17-ts/webpack/bootstrap","webpack://ch17-ts/webpack/runtime/define property getters","webpack://ch17-ts/webpack/runtime/hasOwnProperty shorthand","webpack://ch17-ts/webpack/runtime/make namespace object","webpack://ch17-ts/./ex05/index.js"],"sourcesContent":["// grid を canvas に描画する\r\nexport function renderGrid(grid,rowSize,colSize,ctx,RESOLUTION) {\r\n    for (let row = 0; row < rowSize; row++) {\r\n      for (let col = 0; col < colSize; col++) {\r\n        const cell = grid[row][col];\r\n        ctx.beginPath();\r\n        ctx.rect(col * RESOLUTION, row * RESOLUTION, RESOLUTION, RESOLUTION);\r\n        ctx.fillStyle = cell ? \"black\" : \"white\";\r\n        ctx.fill();\r\n        ctx.stroke();\r\n      }\r\n    }\r\n  }","// Life Game のルールに従ってセルを更新する\r\nexport function updateGrid(grid,rowSize,colSize) {\r\n    // 新しいグリッドを作成\r\n    const nextGrid = grid.map((arr) => [...arr]);\r\n  \r\n    for (let row = 0; row < rowSize; row++) {\r\n      for (let col = 0; col < colSize; col++) {\r\n        let liveNeighbors = 0;\r\n  \r\n        // 周囲8セルの生存数を数える\r\n        for (let i = -1; i <= 1; i++) {\r\n          for (let j = -1; j <= 1; j++) {\r\n            if (i === 0 && j === 0) continue;\r\n            const newRow = (row + i + rowSize) % rowSize;\r\n            const newCol = (col + j + colSize) % colSize;\r\n            liveNeighbors += grid[newRow][newCol] ? 1 : 0;\r\n          }\r\n        }\r\n  \r\n        // ライフゲームのルールを適用\r\n        if (grid[row][col]) {\r\n          // 生きているセル\r\n          nextGrid[row][col] = liveNeighbors === 2 || liveNeighbors === 3;\r\n        } else {\r\n          // 死んでいるセル\r\n          nextGrid[row][col] = liveNeighbors === 3;\r\n        }\r\n      }\r\n    }\r\n    return nextGrid;\r\n}","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { updateGrid } from \"./updateGrid.js\";\r\nimport { renderGrid } from \"./renderGrid.js\";\r\nconst ROWS = 50;\r\nconst COLS = 50;\r\n\r\n// 1セルのサイズ\r\nconst RESOLUTION = 10;\r\n\r\nconst canvas = document.querySelector(\"#screen\");\r\nconst ctx = canvas.getContext(\"2d\");\r\nconst startButton = document.querySelector(\"#start\");\r\nconst pauseButton = document.querySelector(\"#pause\");\r\n\r\ncanvas.width = ROWS * RESOLUTION;\r\ncanvas.height = COLS * RESOLUTION;\r\n\r\n// https://developer.mozilla.org/ja/docs/Web/API/Window/requestAnimationFrame が返す ID\r\nlet animationId = null;\r\n\r\n// NOTE: download from https://soundeffect-lab.info/sound/button/mp3/decision1.mp3\r\nconst sound = new Audio(\"/ch15.04-10/ex10/decision1.mp3\");\r\n\r\n\r\n// ライフゲームのセル (true or false) をランダムに初期化する\r\nlet grid = new Array(ROWS)\r\n  .fill(null)\r\n  .map(() =>\r\n    new Array(COLS).fill(null).map(() => !!Math.floor(Math.random() * 2))\r\n  );\r\n\r\n  // canvas がクリックされたときの処理 (セルの値を反転する)\r\ncanvas.addEventListener(\"click\", function (evt) {\r\n    const rect = canvas.getBoundingClientRect();\r\n    const pos = { x: evt.clientX - rect.left, y: evt.clientY - rect.top };\r\n    const row = Math.floor(pos.y / RESOLUTION);\r\n    const col = Math.floor(pos.x / RESOLUTION);\r\n    grid[row][col] = !grid[row][col];\r\n    sound.cloneNode().play();\r\n    renderGrid(grid,ROWS,COLS,ctx,RESOLUTION);\r\n  });\r\n\r\n  // requestAnimationFrame によって一定間隔で更新・描画を行う\r\nfunction update() {\r\n    grid = updateGrid(grid,ROWS,COLS);\r\n    renderGrid(grid,ROWS,COLS,ctx,RESOLUTION);\r\n    animationId = requestAnimationFrame(update);\r\n  }\r\n  \r\n  startButton.addEventListener(\"click\", () => {\r\n    // 既にアニメーションが動いている場合は何もしない\r\n    if (animationId) {\r\n      return;\r\n    }\r\n    update();\r\n  });\r\n  \r\n  pauseButton.addEventListener(\"click\", () => {\r\n    // アニメーションが停止している場合は何もしない\r\n    if (!animationId) {\r\n      return;\r\n    }\r\n    cancelAnimationFrame(animationId);\r\n    animationId = null;\r\n  });\r\n  \r\n  renderGrid(grid,ROWS,COLS,ctx,RESOLUTION);"],"names":[],"sourceRoot":""}